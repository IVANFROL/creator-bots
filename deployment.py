import os
import subprocess
import shutil
from pathlib import Path
from database import Bot, SessionLocal
from config import Config
import logging

logger = logging.getLogger(__name__)

class BotDeploymentService:
    def __init__(self):
        self.db = SessionLocal()
        self.templates_dir = Path(Config.BOT_TEMPLATES_DIR)
        self.generated_dir = Path(Config.GENERATED_BOTS_DIR)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.templates_dir.mkdir(exist_ok=True)
        self.generated_dir.mkdir(exist_ok=True)
    
    def create_bot_package(self, bot: Bot) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–∫–µ—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–æ—Ç–∞
            bot_dir = self.generated_dir / f"bot_{bot.id}"
            bot_dir.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
            self._create_main_file(bot, bot_dir)
            self._create_config_file(bot, bot_dir)
            self._create_requirements_file(bot, bot_dir)
            self._create_readme_file(bot, bot_dir)
            self._create_docker_files(bot, bot_dir)
            self._create_deployment_scripts(bot, bot_dir)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            bot.status = 'ready_for_deployment'
            self.db.commit()
            
            return str(bot_dir)
            
        except Exception as e:
            logger.error(f"Error creating bot package: {e}")
            bot.status = 'error'
            self.db.commit()
            raise
    
    def _create_main_file(self, bot: Bot, bot_dir: Path):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞"""
        main_file = bot_dir / "main.py"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if bot.generated_code:
            with open(main_file, 'w', encoding='utf-8') as f:
                f.write(bot.generated_code)
        else:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            template = self._get_basic_bot_template()
            with open(main_file, 'w', encoding='utf-8') as f:
                f.write(template)
    
    def _create_config_file(self, bot: Bot, bot_dir: Path):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        config_file = bot_dir / "config.py"
        
        config_content = f'''import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    WEBHOOK_URL = os.getenv('WEBHOOK_URL')
    HOST = os.getenv('HOST', '0.0.0.0')
    PORT = int(os.getenv('PORT', 8000))
    DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
'''
        
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)
    
    def _create_requirements_file(self, bot: Bot, bot_dir: Path):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        requirements_file = bot_dir / "requirements.txt"
        
        requirements = [
            "python-telegram-bot==20.7",
            "python-dotenv==1.0.0",
            "requests==2.31.0",
            "aiohttp==3.9.1",
            "gunicorn==21.2.0"
        ]
        
        with open(requirements_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(requirements))
    
    def _create_readme_file(self, bot: Bot, bot_dir: Path):
        """–°–æ–∑–¥–∞–µ—Ç README —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
        readme_file = bot_dir / "README.md"
        
        readme_content = f'''# {bot.name}

{bot.description}

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
pip install -r requirements.txt
```

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env` –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:
```env
BOT_TOKEN=your_bot_token_here
WEBHOOK_URL=https://yourdomain.com/webhook
HOST=0.0.0.0
PORT=8000
DEBUG=False
ADMIN_IDS=123456789,987654321
```

### 3. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
```bash
python main.py
```

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker

### 1. –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
```bash
docker build -t {bot.name.lower()}_bot .
```

### 2. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
```bash
docker run -d --name {bot.name.lower()}_bot --env-file .env {bot.name.lower()}_bot
```

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

### 1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä.

### 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
pip install -r requirements.txt
```

### 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `/etc/systemd/system/{bot.name.lower()}_bot.service`:
```ini
[Unit]
Description={bot.name} Bot
After=network.target

[Service]
Type=simple
User=your_user
WorkingDirectory=/path/to/bot
ExecStart=/usr/bin/python3 main.py
Restart=always

[Install]
WantedBy=multi-user.target
```

### 4. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
```bash
sudo systemctl enable {bot.name.lower()}_bot
sudo systemctl start {bot.name.lower()}_bot
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞:
```bash
sudo systemctl status {bot.name.lower()}_bot
```

–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:
```bash
sudo journalctl -u {bot.name.lower()}_bot -f
```
'''
        
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
    
    def _create_docker_files(self, bot: Bot, bot_dir: Path):
        """–°–æ–∑–¥–∞–µ—Ç Docker —Ñ–∞–π–ª—ã"""
        # Dockerfile
        dockerfile = bot_dir / "Dockerfile"
        dockerfile_content = '''FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["python", "main.py"]
'''
        
        with open(dockerfile, 'w', encoding='utf-8') as f:
            f.write(dockerfile_content)
        
        # docker-compose.yml
        compose_file = bot_dir / "docker-compose.yml"
        compose_content = f'''version: '3.8'

services:
  {bot.name.lower()}_bot:
    build: .
    container_name: {bot.name.lower()}_bot
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
'''
        
        with open(compose_file, 'w', encoding='utf-8') as f:
            f.write(compose_content)
    
    def _create_deployment_scripts(self, bot: Bot, bot_dir: Path):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        # –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        deploy_script = bot_dir / "deploy.sh"
        deploy_content = f'''#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è {bot.name}

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ {bot.name}..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example"
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
pip install -r requirements.txt

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
echo "ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞..."
python main.py
'''
        
        with open(deploy_script, 'w', encoding='utf-8') as f:
            f.write(deploy_content)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(deploy_script, 0o755)
        
        # –°–∫—Ä–∏–ø—Ç –¥–ª—è systemd
        systemd_script = bot_dir / "install_systemd.sh"
        systemd_content = f'''#!/bin/bash

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {bot.name} –∫–∞–∫ systemd —Å–µ—Ä–≤–∏—Å–∞

BOT_NAME="{bot.name.lower()}_bot"
SERVICE_FILE="/etc/systemd/system/$BOT_NAME.service"
CURRENT_DIR=$(pwd)

echo "üîß –°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è $BOT_NAME..."

# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ñ–∞–π–ª
sudo tee $SERVICE_FILE > /dev/null <<EOF
[Unit]
Description={bot.name} Bot
After=network.target

[Service]
Type=simple
User=$USER
WorkingDirectory=$CURRENT_DIR
ExecStart=/usr/bin/python3 main.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
sudo systemctl daemon-reload

# –í–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
sudo systemctl enable $BOT_NAME

echo "‚úÖ –°–µ—Ä–≤–∏—Å $BOT_NAME —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω!"
echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo systemctl start $BOT_NAME"
echo "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: sudo systemctl status $BOT_NAME"
'''
        
        with open(systemd_script, 'w', encoding='utf-8') as f:
            f.write(systemd_content)
        
        os.chmod(systemd_script, 0o755)
    
    def _get_basic_bot_template(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –±–æ—Ç–∞"""
        return '''import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é Bot Creator.\\n"
        f"–¢–≤–æ–π ID: {update.effective_user.id}"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è"""
    await update.message.reply_text(update.message.text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(Config.BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
'''
    
    def create_zip_package(self, bot: Bot) -> str:
        """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å –±–æ—Ç–æ–º"""
        try:
            bot_dir = self.create_bot_package(bot)
            zip_path = f"{bot_dir}.zip"
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            shutil.make_archive(bot_dir, 'zip', bot_dir)
            
            return zip_path
            
        except Exception as e:
            logger.error(f"Error creating ZIP package: {e}")
            raise
    
    def get_deployment_status(self, bot_id: int) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
        bot = self.db.query(Bot).filter(Bot.id == bot_id).first()
        if not bot:
            return {"error": "Bot not found"}
        
        return {
            "bot_id": bot.id,
            "name": bot.name,
            "status": bot.status,
            "created_at": bot.created_at.isoformat(),
            "last_updated": bot.last_updated.isoformat()
        }
