#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

from database import create_tables, User, Bot, Generation, SessionLocal
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_tables()
        logger.info("üìä –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        if db.query(User).count() > 0:
            logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
            db.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = [
            {
                "telegram_id": 1704897414,
                "username": "admin_user",
                "first_name": "–ê–¥–º–∏–Ω",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "is_premium": True,
                "free_generations_used": 2,
                "premium_generations_used": 5,
                "free_generations_limit": 2,
                "premium_generations_limit": 50,
                "premium_expires_at": datetime.utcnow() + timedelta(days=30)
            },
            {
                "telegram_id": 6491802621,
                "username": "ilya_ttr",
                "first_name": "–ò–ª—å—è",
                "last_name": "–¢–µ—Å—Ç–µ—Ä",
                "is_premium": True,
                "free_generations_used": 2,
                "premium_generations_used": 3,
                "free_generations_limit": 2,
                "premium_generations_limit": 50,
                "premium_expires_at": datetime.utcnow() + timedelta(days=15)
            },
            {
                "telegram_id": 123456789,
                "username": "test_user1",
                "first_name": "–¢–µ—Å—Ç",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1",
                "is_premium": False,
                "free_generations_used": 1,
                "premium_generations_used": 0,
                "free_generations_limit": 2,
                "premium_generations_limit": 0,
                "premium_expires_at": None
            },
            {
                "telegram_id": 987654321,
                "username": "test_user2",
                "first_name": "–¢–µ—Å—Ç",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2",
                "is_premium": False,
                "free_generations_used": 2,
                "premium_generations_used": 0,
                "free_generations_limit": 2,
                "premium_generations_limit": 0,
                "premium_expires_at": None
            },
            {
                "telegram_id": 555666777,
                "username": "premium_user",
                "first_name": "–ü—Ä–µ–º–∏—É–º",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "is_premium": True,
                "free_generations_used": 2,
                "premium_generations_used": 8,
                "free_generations_limit": 2,
                "premium_generations_limit": 50,
                "premium_expires_at": datetime.utcnow() + timedelta(days=7)
            }
        ]
        
        users = []
        for user_data in users_data:
            user = User(**user_data)
            users.append(user)
            db.add(user)
        
        db.commit()
        logger.info(f"üë• –°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–æ—Ç–æ–≤
        bots_data = [
            {
                "name": "–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
                "description": "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
                "token": "1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                "owner_id": users[0].id,
                "status": "active",
                "generated_code": "print('Hello, World!')"
            },
            {
                "name": "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–∏–∑–Ω–µ—Å—É",
                "description": "–ë–æ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –±–∏–∑–Ω–µ—Å–∞",
                "token": "2345678901:BCDEFGHIJKLMNOPQRSTUVWXYZ",
                "owner_id": users[1].id,
                "status": "active",
                "generated_code": "def business_advice(): pass"
            },
            {
                "name": "–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —è–∑—ã–∫–æ–≤",
                "description": "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑—É—á–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏",
                "token": "3456789012:CDEFGHIJKLMNOPQRSTUVWXYZ",
                "owner_id": users[2].id,
                "status": "inactive",
                "generated_code": "def language_lesson(): pass"
            },
            {
                "name": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫",
                "description": "–ë–æ—Ç –¥–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º",
                "token": "4567890123:DEFGHIJKLMNOPQRSTUVWXYZ",
                "owner_id": users[3].id,
                "status": "active",
                "generated_code": "def financial_advice(): pass"
            },
            {
                "name": "–§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä",
                "description": "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏",
                "token": "5678901234:EFGHIJKLMNOPQRSTUVWXYZ",
                "owner_id": users[4].id,
                "status": "active",
                "generated_code": "def workout_plan(): pass"
            }
        ]
        
        bots = []
        for bot_data in bots_data:
            bot = Bot(**bot_data)
            bots.append(bot)
            db.add(bot)
        
        db.commit()
        logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–æ {len(bots)} –±–æ—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generations_data = [
            {
                "user_id": users[0].id,
                "bot_id": bots[0].id,
                "prompt": "–°–æ–∑–¥–∞–π –±–æ—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
                "generated_code": "def programming_helper(): pass",
                "status": "completed",
                "created_at": datetime.utcnow() - timedelta(days=5),
                "completed_at": datetime.utcnow() - timedelta(days=5)
            },
            {
                "user_id": users[1].id,
                "bot_id": bots[1].id,
                "prompt": "–°–æ–∑–¥–∞–π –±–æ—Ç–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –±–∏–∑–Ω–µ—Å—É",
                "generated_code": "def business_consultant(): pass",
                "status": "completed",
                "created_at": datetime.utcnow() - timedelta(days=4),
                "completed_at": datetime.utcnow() - timedelta(days=4)
            },
            {
                "user_id": users[2].id,
                "bot_id": bots[2].id,
                "prompt": "–°–æ–∑–¥–∞–π –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
                "generated_code": "def english_teacher(): pass",
                "status": "completed",
                "created_at": datetime.utcnow() - timedelta(days=3),
                "completed_at": datetime.utcnow() - timedelta(days=3)
            },
            {
                "user_id": users[3].id,
                "bot_id": bots[3].id,
                "prompt": "–°–æ–∑–¥–∞–π –±–æ—Ç–∞-—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞",
                "generated_code": "def financial_advisor(): pass",
                "status": "completed",
                "created_at": datetime.utcnow() - timedelta(days=2),
                "completed_at": datetime.utcnow() - timedelta(days=2)
            },
            {
                "user_id": users[4].id,
                "bot_id": bots[4].id,
                "prompt": "–°–æ–∑–¥–∞–π –±–æ—Ç–∞-—Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞",
                "generated_code": "def fitness_trainer(): pass",
                "status": "completed",
                "created_at": datetime.utcnow() - timedelta(days=1),
                "completed_at": datetime.utcnow() - timedelta(days=1)
            },
            {
                "user_id": users[0].id,
                "bot_id": None,
                "prompt": "–°–æ–∑–¥–∞–π –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏",
                "generated_code": None,
                "status": "pending",
                "created_at": datetime.utcnow() - timedelta(hours=2)
            },
            {
                "user_id": users[1].id,
                "bot_id": None,
                "prompt": "–°–æ–∑–¥–∞–π –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã",
                "generated_code": None,
                "status": "failed",
                "created_at": datetime.utcnow() - timedelta(hours=1)
            }
        ]
        
        generations = []
        for gen_data in generations_data:
            generation = Generation(**gen_data)
            generations.append(generation)
            db.add(generation)
        
        db.commit()
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ {len(generations)} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
        
        db.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

if __name__ == "__main__":
    init_database()
