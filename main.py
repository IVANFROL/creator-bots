import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import User, Bot, Generation, create_tables, SessionLocal
from ai_service import AIService
from config import Config
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BotCreatorBot:
    def __init__(self):
        self.ai_service = AIService()
        self.db = SessionLocal()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_user = self.db.query(User).filter(User.telegram_id == user_id).first()
        if not db_user:
            db_user = User(
                telegram_id=user_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            self.db.add(db_user)
            self.db.commit()
        
        welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bot Creator!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –±–æ—Ç–æ–≤ –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

<b>–õ–∏–º–∏—Ç—ã:</b>
‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {Config.FREE_GENERATIONS} –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ üíé Premium: {Config.PREMIUM_GENERATIONS_PER_MONTH} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –º–µ—Å—è—Ü

<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {db_user.free_generations_used}/{Config.FREE_GENERATIONS}
‚Ä¢ Premium —Å—Ç–∞—Ç—É—Å: {'‚úÖ' if db_user.is_premium else '‚ùå'}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", callback_data="create_bot")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –±–æ—Ç—ã", callback_data="my_bots")],
            [InlineKeyboardButton("üíé Premium", callback_data="premium")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def create_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        db_user = self.db.query(User).filter(User.telegram_id == user_id).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not db_user.is_premium and db_user.free_generations_used >= Config.FREE_GENERATIONS:
            await query.edit_message_text(
                "‚ùå <b>–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n"
                "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. "
                "–û—Ñ–æ—Ä–º–∏ Premium –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å Premium", callback_data="premium")]])
            )
            return
        
        await query.edit_message_text(
            "ü§ñ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</b>\n\n"
            "–û–ø–∏—à–∏, –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>\n"
            "‚Ä¢ –ë–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–∏–∫–µ—Ç–æ–≤\n"
            "‚Ä¢ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏\n"
            "‚Ä¢ –ò–≥—Ä–æ–≤–æ–π –±–æ—Ç —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º–∏\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!",
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        context.user_data['waiting_for_description'] = True
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if context.user_data.get('waiting_for_description'):
            await self.process_bot_description(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã! ü§ñ"
            )
    
    async def process_bot_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        description = update.message.text
        user_id = update.effective_user.id
        
        # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['waiting_for_description'] = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        processing_msg = await update.message.reply_text(
            "üîÑ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–æ—Ç–∞...</b>\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏! ‚è≥",
            parse_mode='HTML'
        )
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–æ—Ç–∞
            bot_type = self.ai_service.analyze_bot_requirements(description)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –±–æ—Ç–∞
            result = self.ai_service.generate_bot_code(description, bot_type)
            
            if result['status'] == 'error':
                await processing_msg.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n{result['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
                    parse_mode='HTML'
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_user = self.db.query(User).filter(User.telegram_id == user_id).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ—Ç–µ
            new_bot = Bot(
                name=f"Bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                description=result['description'],
                owner_id=db_user.id,
                generated_code=result['main_code'],
                status='created'
            )
            self.db.add(new_bot)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation = Generation(
                user_id=db_user.id,
                bot_id=new_bot.id,
                prompt=description,
                generated_code=result['main_code'],
                status='completed',
                completed_at=datetime.utcnow()
            )
            self.db.add(generation)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            if db_user.is_premium:
                db_user.premium_generations_used += 1
            else:
                db_user.free_generations_used += 1
            
            self.db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self.send_generated_bot(update, context, new_bot, result)
            
        except Exception as e:
            logger.error(f"Error generating bot: {e}")
            await processing_msg.edit_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                parse_mode='HTML'
            )
    
    async def send_generated_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot: Bot, result: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        bot_info = f"""
‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {bot.name}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {result['description']}
<b>–¢–∏–ø:</b> {bot.status}

<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ Requirements.txt
‚Ä¢ README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        """
        
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –∫–æ–¥", callback_data=f"download_{bot.id}")],
            [InlineKeyboardButton("üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"deploy_{bot.id}")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –±–æ—Ç—ã", callback_data="my_bots")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(bot_info, parse_mode='HTML', reply_markup=reply_markup)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–∞–∫ —Ñ–∞–π–ª
        code_text = f"# {bot.name}\n# {result['description']}\n\n{result['main_code']}"
        await update.message.reply_document(
            document=code_text.encode(),
            filename=f"{bot.name}.py",
            caption="üìÑ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞"
        )
    
    async def my_bots(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        db_user = self.db.query(User).filter(User.telegram_id == user_id).first()
        
        if not db_user or not db_user.bots:
            await query.edit_message_text(
                "üìã <b>–ú–æ–∏ –±–æ—Ç—ã</b>\n\n"
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.\n"
                "–°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç!",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", callback_data="create_bot")]])
            )
            return
        
        bots_text = "üìã <b>–ú–æ–∏ –±–æ—Ç—ã</b>\n\n"
        keyboard = []
        
        for i, bot in enumerate(db_user.bots[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –±–æ—Ç–æ–≤
            status_emoji = "‚úÖ" if bot.status == "active" else "‚è∏Ô∏è" if bot.status == "inactive" else "‚ùå"
            bots_text += f"{i}. {status_emoji} <b>{bot.name}</b>\n"
            bots_text += f"   {bot.description[:50]}...\n"
            bots_text += f"   <i>–°–æ–∑–¥–∞–Ω: {bot.created_at.strftime('%d.%m.%Y')}</i>\n\n"
            
            keyboard.append([InlineKeyboardButton(f"üîß {bot.name}", callback_data=f"bot_details_{bot.id}")])
        
        keyboard.append([InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="create_bot")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(bots_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def premium(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Premium –ø–æ–¥–ø–∏—Å–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        premium_text = """
üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:</b>
‚Ä¢ üöÄ {premium_gens} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –º–µ—Å—è—Ü
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
‚Ä¢ üìû –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 299‚ÇΩ/–º–µ—Å—è—Ü

<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ –°–ë–ü
‚Ä¢ –ÆMoney
‚Ä¢ QIWI
        """.format(premium_gens=Config.PREMIUM_GENERATIONS_PER_MONTH)
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_premium")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(premium_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
        query = update.callback_query
        await query.answer()
        
        help_text = """
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞:</b>
1. –ù–∞–∂–º–∏ "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"
2. –û–ø–∏—à–∏, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –±–æ—Ç
3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥
4. –†–∞–∑–≤–µ—Ä–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

<b>–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:</b>
‚Ä¢ "–ë–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–æ—Ä–∑–∏–Ω–æ–π"
‚Ä¢ "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ç–∏–∫–µ—Ç–æ–≤ –∏ FAQ"
‚Ä¢ "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"
‚Ä¢ "–ò–≥—Ä–æ–≤–æ–π –±–æ—Ç —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_username
        """
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, parse_mode='HTML', reply_markup=reply_markup)
    
    async def back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
        await self.start(update, context)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        data = query.data
        
        if data == "create_bot":
            await self.create_bot(update, context)
        elif data == "my_bots":
            await self.my_bots(update, context)
        elif data == "premium":
            await self.premium(update, context)
        elif data == "help":
            await self.help(update, context)
        elif data == "back_to_main":
            await self.back_to_main(update, context)
        elif data.startswith("download_"):
            bot_id = int(data.split("_")[1])
            await self.download_bot(update, context, bot_id)
        elif data.startswith("deploy_"):
            bot_id = int(data.split("_")[1])
            await self.deploy_bot(update, context, bot_id)
        elif data.startswith("bot_details_"):
            bot_id = int(data.split("_")[2])
            await self.show_bot_details(update, context, bot_id)
    
    async def download_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_id: int):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –±–æ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        bot = self.db.query(Bot).filter(Bot.id == bot_id).first()
        if not bot:
            await query.edit_message_text("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∫–∞–∫ —Ñ–∞–π–ª
        code_text = f"# {bot.name}\n# {bot.description}\n\n{bot.generated_code}"
        await query.message.reply_document(
            document=code_text.encode(),
            filename=f"{bot.name}.py",
            caption=f"üìÑ –ö–æ–¥ –±–æ—Ç–∞: {bot.name}"
        )
    
    async def deploy_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_id: int):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üöÄ <b>–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞</b>\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ —á—Ç–æ —Å–∫–∞—á–∞–π –∫–æ–¥ –∏ —Ä–∞–∑–≤–µ—Ä–Ω–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode='HTML'
        )
    
    async def show_bot_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –±–æ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        bot = self.db.query(Bot).filter(Bot.id == bot_id).first()
        if not bot:
            await query.edit_message_text("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        status_emoji = "‚úÖ" if bot.status == "active" else "‚è∏Ô∏è" if bot.status == "inactive" else "‚ùå"
        
        details_text = f"""
üîß <b>–î–µ—Ç–∞–ª–∏ –±–æ—Ç–∞</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {bot.name}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {bot.description}
<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {bot.status}
<b>–°–æ–∑–¥–∞–Ω:</b> {bot.created_at.strftime('%d.%m.%Y %H:%M')}
<b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {bot.last_updated.strftime('%d.%m.%Y %H:%M')}
        """
        
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{bot.id}")],
            [InlineKeyboardButton("üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"deploy_{bot.id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_bots")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(details_text, parse_mode='HTML', reply_markup=reply_markup)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    create_tables()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot_creator = BotCreatorBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot_creator.start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_creator.handle_message))
    application.add_handler(CallbackQueryHandler(bot_creator.button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ Bot Creator –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
